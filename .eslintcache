[{"/home/tom/code/react/lets_pop_to/src/index.tsx":"1","/home/tom/code/react/lets_pop_to/src/App.tsx":"2","/home/tom/code/react/lets_pop_to/src/redux/store.tsx":"3","/home/tom/code/react/lets_pop_to/src/features/navBar/NavBar.tsx":"4","/home/tom/code/react/lets_pop_to/src/helpers/cameliseKeys.ts":"5","/home/tom/code/react/lets_pop_to/src/helpers/formatPrice.ts":"6","/home/tom/code/react/lets_pop_to/src/helpers/parseTime.ts":"7","/home/tom/code/react/lets_pop_to/src/features/inspireMe/inspireMeSlice.ts":"8","/home/tom/code/react/lets_pop_to/src/features/inspireMe/InspireMe.tsx":"9","/home/tom/code/react/lets_pop_to/src/features/inspireMe/PlaceInput.tsx":"10","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectDates.tsx":"11","/home/tom/code/react/lets_pop_to/src/features/footer/Footer.tsx":"12","/home/tom/code/react/lets_pop_to/src/constants/routes.ts":"13","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/BrowseInspiredFlights.tsx":"14","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/DestinationCard.tsx":"15","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/fetchPhoto.ts":"16","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/DestinationGrid.tsx":"17","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/Filters.tsx":"18","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/DirectPicker.tsx":"19","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/PricePicker.tsx":"20","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/PriceRange.tsx":"21","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/PriceSlider.tsx":"22","/home/tom/code/react/lets_pop_to/src/features/flights/Flights.tsx":"23","/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/filtersSlice.ts":"24","/home/tom/code/react/lets_pop_to/src/features/flights/fetchFlights.ts":"25","/home/tom/code/react/lets_pop_to/src/features/flights/Flight.tsx":"26","/home/tom/code/react/lets_pop_to/src/features/flights/ReferralButton.tsx":"27","/home/tom/code/react/lets_pop_to/src/features/inspireMe/MultiDatePicker.tsx":"28","/home/tom/code/react/lets_pop_to/src/features/flights/CalendarCard.tsx":"29","/home/tom/code/react/lets_pop_to/src/features/flights/FlightDestinations.tsx":"30","/home/tom/code/react/lets_pop_to/src/features/flights/DestinationDivider.tsx":"31","/home/tom/code/react/lets_pop_to/src/features/flights/Logo.tsx":"32","/home/tom/code/react/lets_pop_to/src/features/flights/fetchLogo.ts":"33","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/SelectNewDates.tsx":"34","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/NormalSelector/NormalCalendarContainer.tsx":"35","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/SpecificDatesSelector/SpecificDatesContainer.tsx":"36","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/WeekdaySelector/WeekdaySelectorContainer.tsx":"37","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/SpecificDatesSelector/SpecificDatesCalendar.tsx":"38","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/WeekdaySelector/WeekdayCalendar.tsx":"39","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/NormalSelector/NormalCalendar.tsx":"40","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/DateSelector.tsx":"41"},{"size":523,"mtime":1610465581349,"results":"42","hashOfConfig":"43"},{"size":1247,"mtime":1612367374337,"results":"44","hashOfConfig":"43"},{"size":633,"mtime":1611757648085,"results":"45","hashOfConfig":"43"},{"size":2045,"mtime":1612878102163,"results":"46","hashOfConfig":"43"},{"size":453,"mtime":1608654860198,"results":"47","hashOfConfig":"43"},{"size":1621,"mtime":1609263537154,"results":"48","hashOfConfig":"43"},{"size":1301,"mtime":1610465550053,"results":"49","hashOfConfig":"43"},{"size":688,"mtime":1612036532042,"results":"50","hashOfConfig":"43"},{"size":4111,"mtime":1612039802994,"results":"51","hashOfConfig":"43"},{"size":3306,"mtime":1610465501590,"results":"52","hashOfConfig":"43"},{"size":1655,"mtime":1612033862685,"results":"53","hashOfConfig":"43"},{"size":1219,"mtime":1610465483830,"results":"54","hashOfConfig":"43"},{"size":199,"mtime":1611760933334,"results":"55","hashOfConfig":"43"},{"size":1285,"mtime":1611760363684,"results":"56","hashOfConfig":"43"},{"size":5502,"mtime":1612912216777,"results":"57","hashOfConfig":"43"},{"size":609,"mtime":1612913133741,"results":"58","hashOfConfig":"43"},{"size":7244,"mtime":1612900662291,"results":"59","hashOfConfig":"43"},{"size":296,"mtime":1611759370549,"results":"60","hashOfConfig":"43"},{"size":1633,"mtime":1611758086717,"results":"61","hashOfConfig":"43"},{"size":1747,"mtime":1611776485083,"results":"62","hashOfConfig":"43"},{"size":1309,"mtime":1611759335810,"results":"63","hashOfConfig":"43"},{"size":4464,"mtime":1611760724138,"results":"64","hashOfConfig":"43"},{"size":1736,"mtime":1612030798342,"results":"65","hashOfConfig":"43"},{"size":974,"mtime":1611761256999,"results":"66","hashOfConfig":"43"},{"size":913,"mtime":1611770657202,"results":"67","hashOfConfig":"43"},{"size":4743,"mtime":1612032567003,"results":"68","hashOfConfig":"43"},{"size":950,"mtime":1611939331361,"results":"69","hashOfConfig":"43"},{"size":3166,"mtime":1611858105556,"results":"70","hashOfConfig":"43"},{"size":3512,"mtime":1612032166650,"results":"71","hashOfConfig":"43"},{"size":1179,"mtime":1612029086461,"results":"72","hashOfConfig":"43"},{"size":627,"mtime":1611943176437,"results":"73","hashOfConfig":"43"},{"size":940,"mtime":1612029137214,"results":"74","hashOfConfig":"43"},{"size":856,"mtime":1612021209966,"results":"75","hashOfConfig":"43"},{"size":1816,"mtime":1613078823626,"results":"76","hashOfConfig":"43"},{"size":318,"mtime":1613078728632,"results":"77","hashOfConfig":"43"},{"size":357,"mtime":1613078772679,"results":"78","hashOfConfig":"43"},{"size":341,"mtime":1613078710053,"results":"79","hashOfConfig":"43"},{"size":10003,"mtime":1613078344380,"results":"80","hashOfConfig":"43"},{"size":3231,"mtime":1613078257398,"results":"81","hashOfConfig":"43"},{"size":4834,"mtime":1613078344476,"results":"82","hashOfConfig":"43"},{"size":2470,"mtime":1613080779132,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"xpxue0",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/tom/code/react/lets_pop_to/src/index.tsx",[],["170","171"],"/home/tom/code/react/lets_pop_to/src/App.tsx",[],"/home/tom/code/react/lets_pop_to/src/redux/store.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/navBar/NavBar.tsx",[],"/home/tom/code/react/lets_pop_to/src/helpers/cameliseKeys.ts",[],["172","173"],"/home/tom/code/react/lets_pop_to/src/helpers/formatPrice.ts",[],"/home/tom/code/react/lets_pop_to/src/helpers/parseTime.ts",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/inspireMeSlice.ts",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/InspireMe.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/PlaceInput.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectDates.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/footer/Footer.tsx",[],"/home/tom/code/react/lets_pop_to/src/constants/routes.ts",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/BrowseInspiredFlights.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/DestinationCard.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/fetchPhoto.ts",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/DestinationGrid.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/Filters.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/DirectPicker.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/PricePicker.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/PriceRange.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/PriceSlider.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/flights/Flights.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/browseInspiredFlights/Filters/filtersSlice.ts",[],"/home/tom/code/react/lets_pop_to/src/features/flights/fetchFlights.ts",[],"/home/tom/code/react/lets_pop_to/src/features/flights/Flight.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/flights/ReferralButton.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/MultiDatePicker.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/flights/CalendarCard.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/flights/FlightDestinations.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/flights/DestinationDivider.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/flights/Logo.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/flights/fetchLogo.ts",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/SelectNewDates.tsx",["174"],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/NormalSelector/NormalCalendarContainer.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/SpecificDatesSelector/SpecificDatesContainer.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/WeekdaySelector/WeekdaySelectorContainer.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/SpecificDatesSelector/SpecificDatesCalendar.tsx",["175"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Button,\n  Chip,\n  IconButton,\n  makeStyles,\n  Paper,\n  Theme,\n  Typography,\n} from '@material-ui/core';\nimport { DatePicker } from '@material-ui/pickers';\nimport clsx from 'clsx';\n\nimport { DateType } from '../../../../../type';\nimport { setNewDates } from '../../../inspireMeSlice';\n\nexport const SpecificDatesCalendar = ({\n  direction,\n  closePopup,\n}: {\n  direction: '' | 'oneWay' | 'return';\n  closePopup: () => void;\n}) => {\n  const [dates, setDates] = useState<DateType[]>([]);\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [returnMode, setReturnMode] = useState<boolean>(false);\n  const [settingDate, setSettingDate] = useState<string | null>(null);\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const normalisedDateString = (date: Date): string => {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n\n    const dateString = `${year}-${month < 10 ? `0${month}` : month}-${day}`;\n    return dateString;\n  };\n\n  const handleChange = (newDate: Date | null) => {\n    if (!newDate) {\n      return;\n    }\n\n    const newDateNormalised = new Date(newDate.toUTCString());\n    const newDateString = normalisedDateString(newDateNormalised);\n    setSelectedDate(newDateNormalised);\n\n    if (!returnMode) {\n      if (dates.find((date) => date.outbound === newDateString)) {\n        setDates((dates) =>\n          dates.filter((date) => date.outbound !== newDateString)\n        );\n      } else {\n        setDates((dates) => [\n          ...dates,\n          { outbound: newDateString, inbound: '' },\n        ]);\n      }\n    } else if (settingDate) {\n      const alreadyExists = dates.findIndex(\n        (date) =>\n          date.outbound === settingDate && date.inbound === newDateString\n      );\n      if (alreadyExists !== -1) {\n        if (\n          dates.filter((date) => date.outbound === settingDate).length === 1\n        ) {\n          setDates(\n            dates.map((date) => {\n              if (\n                date.outbound === settingDate &&\n                date.inbound === newDateString\n              ) {\n                const updated = { outbound: date.outbound, inbound: '' };\n                return updated;\n              }\n              return date;\n            })\n          );\n          return;\n        }\n        setDates(\n          dates.filter(\n            (date) =>\n              !(date.outbound === settingDate && date.inbound === newDateString)\n          )\n        );\n        return;\n      }\n      const firstDate = dates.findIndex(\n        (date) => date.outbound === settingDate && date.inbound === ''\n      );\n      if (firstDate >= 0) {\n        setDates((dates) =>\n          dates.map((date, index) => {\n            if (index === firstDate) {\n              const updatedDate = {\n                outbound: date.outbound,\n                inbound: newDateString,\n              };\n              return updatedDate;\n            }\n            return date;\n          })\n        );\n      } else {\n        setDates((dates) => [\n          ...dates,\n          { outbound: settingDate, inbound: newDateString },\n        ]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setNewDates(dates));\n  }, [dates, dispatch]);\n\n  const renderDay = (\n    date: Date | null,\n    _selectedDate: Date | null,\n    dayInCurrentMonth: boolean\n  ): JSX.Element => {\n    const nonNullDate = date ? date : new Date(1900);\n    const dateTime = nonNullDate.getTime();\n    const dateNormalised = new Date(nonNullDate.toDateString());\n    // const dateString = `${dateNormalised.toISOString().substr(0, 10)}`;\n    const dateString = normalisedDateString(dateNormalised);\n\n    const todayDate = new Date(new Date().toDateString());\n    const todayTime = todayDate.getTime();\n\n    const isInPast = dateTime ? dateTime < todayTime : false;\n    const isSelected = dates.find((date) => date.outbound === dateString)\n      ?.outbound\n      ? true\n      : false;\n\n    const isSettingDate = dateString === settingDate;\n    const isReturnDate = dates.find(\n      (date) => date.outbound === settingDate && date.inbound === dateString\n    );\n\n    const settingDateTime = settingDate ? new Date(settingDate).getTime() : 0;\n\n    const returnDates = dates\n      .filter((date) => date.outbound === settingDate && date.inbound !== '')\n      .sort((a, b) => {\n        const aTime = new Date(a.inbound).getTime();\n        const bTime = new Date(b.inbound).getTime();\n        return aTime - bTime;\n      })\n      .pop();\n\n    const lastReturnDateTime = returnDates\n      ? new Date(returnDates.inbound).getTime()\n      : 0;\n\n    const isRangeDate =\n      !(isSettingDate || isReturnDate) &&\n      dateTime > settingDateTime &&\n      dateTime < lastReturnDateTime;\n\n    const wrapperClassName = clsx(classes.dayWrapper, {\n      [classes.highlight]: isSelected && !returnMode,\n      [classes.leftHighlight]: returnMode && isSettingDate,\n      [classes.rightHighlight]: returnMode && isReturnDate,\n      [classes.rangeHighlight]: isRangeDate,\n    });\n\n    const dayClassName = clsx(classes.day, classes.dateElement, {\n      [classes.nonCurrentMonthDay]: !dayInCurrentMonth || isInPast,\n      [classes.highlightNonCurrentMonthDay]: !dayInCurrentMonth && isSelected,\n    });\n\n    return (\n      <div className={wrapperClassName}>\n        <IconButton className={dayClassName}>\n          <span>{date?.getDate()}</span>\n        </IconButton>\n      </div>\n    );\n  };\n\n  const handleDeleteDate = (dateToDelete: DateType) => () => {\n    setDates((dates) =>\n      dates.filter(\n        (date) =>\n          !(\n            date.outbound === dateToDelete.outbound &&\n            date.inbound === dateToDelete.inbound\n          )\n      )\n    );\n  };\n\n  return (\n    <>\n      <div className={classes.directionContainer}>\n        <Typography variant=\"overline\">\n          {returnMode\n            ? 'Select Possible Return Dates For'\n            : 'Select Possible Departure Dates'}\n        </Typography>\n        {returnMode && <Typography>{settingDate}</Typography>}\n      </div>\n\n      <DatePicker\n        value={selectedDate}\n        onChange={handleChange}\n        variant=\"static\"\n        label=\"FlightDateCalendar\"\n        disableToolbar={true}\n        disablePast={true}\n        openTo=\"date\"\n        renderDay={renderDay}\n      />\n\n      {direction === 'return' && !returnMode && (\n        <div className={classes.returnButtonContainer}>\n          <Button\n            disabled={!dates.length}\n            onClick={() => {\n              setReturnMode(true);\n              setSettingDate(dates[0].outbound);\n            }}\n          >\n            Set Return Dates\n          </Button>\n        </div>\n      )}\n      {returnMode && (\n        <div className={classes.nextButtonContainer}>\n          <Button\n            variant=\"outlined\"\n            onClick={() => {\n              const nextUnsetDate = dates.find((date) => date.inbound === '');\n              if (nextUnsetDate) {\n                console.log('setting to ', nextUnsetDate.outbound);\n                setSettingDate(nextUnsetDate.outbound);\n              } else {\n                dispatch(setNewDates(dates));\n                closePopup();\n              }\n            }}\n          >\n            {dates.find((date) => date.inbound === '') ? 'Set Next' : 'Save'}\n          </Button>\n        </div>\n      )}\n      {returnMode && (\n        <Paper component=\"ul\" className={classes.root}>\n          {dates.map((date) => {\n            const dateText = `${date.outbound}:${date.inbound}`;\n            if (date.inbound) {\n              return (\n                <li key={dateText}>\n                  <Chip\n                    label={dateText}\n                    onDelete={handleDeleteDate(date)}\n                    className={classes.chip}\n                  />\n                </li>\n              );\n            }\n          })}\n        </Paper>\n      )}\n    </>\n  );\n};\n\nconst useStyles = makeStyles<Theme>((theme: Theme) => ({\n  dayWrapper: {\n    position: 'relative',\n    margin: '1px',\n  },\n  day: {\n    width: 36,\n    height: 36,\n    fontSize: theme.typography.caption.fontSize,\n    margin: '0 1px',\n    color: 'inherit',\n  },\n  nonCurrentMonthDay: {\n    color: theme.palette.text.disabled,\n  },\n  highlightNonCurrentMonthDay: {\n    color: '#676767',\n  },\n\n  highlight: {\n    background: '#9933cc',\n    color: theme.palette.common.white,\n    borderRadius: '25%',\n  },\n\n  leftHighlight: {\n    background: '#9933cc99',\n    color: theme.palette.common.white,\n    borderTopLeftRadius: '25%',\n    borderBottomLeftRadius: '25%',\n  },\n  rightHighlight: {\n    background: '#9933cc',\n    color: theme.palette.common.white,\n    borderTopRightRadius: '25%',\n    borderBottomRightRadius: '25%',\n  },\n  rangeHighlight: {\n    background: '#9933cc',\n    color: theme.palette.common.white,\n    opacity: '60%',\n  },\n  dateElement: {\n    padding: '12px',\n    overflow: 'visible',\n    textAlign: 'center',\n    borderRadius: '50%',\n    border: '0',\n    display: 'inline-flex',\n    outline: '0',\n    position: 'relative',\n    alignItems: 'center',\n    verticalAlign: 'middle',\n    justifyContent: 'center',\n    textDecoration: 'none',\n    backgroundColor: 'transparent',\n  },\n  dateElementText: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'inherit',\n    justifyContent: 'inherit',\n    fontSize: '0.75rem',\n  },\n  directionContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexBasis: 1,\n  },\n  returnButtonContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    flexBasis: 1,\n    padding: '4px',\n  },\n  nextButtonContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n    flexBasis: 1,\n    padding: '4px',\n    marginTop: '-24px',\n    paddingRight: '16px',\n  },\n}));\n","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/WeekdaySelector/WeekdayCalendar.tsx",["176"],"import { Button, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { Day } from '@material-ui/pickers';\nimport clsx from 'clsx';\nimport React, { useEffect, useState } from 'react';\n\ninterface WeekdayType {\n  weekday:\n    | 'Monday'\n    | 'Tuesday'\n    | 'Wednesday'\n    | 'Thursday'\n    | 'Friday'\n    | 'Saturday'\n    | 'Sunday';\n  selected: boolean;\n}\n\nexport const WeekdayCalendar = ({\n  direction,\n  closePopup,\n}: {\n  direction: '' | 'oneWay' | 'return';\n  closePopup: () => void;\n}) => {\n  const [days, setDays] = useState<WeekdayType[]>([\n    {\n      weekday: 'Monday',\n      selected: false,\n    },\n    {\n      weekday: 'Tuesday',\n      selected: false,\n    },\n    {\n      weekday: 'Wednesday',\n      selected: false,\n    },\n    {\n      weekday: 'Thursday',\n      selected: false,\n    },\n    {\n      weekday: 'Friday',\n      selected: false,\n    },\n    {\n      weekday: 'Saturday',\n      selected: false,\n    },\n    {\n      weekday: 'Sunday',\n      selected: false,\n    },\n  ]);\n\n  const classes = useStyles();\n\n  const toggleDay = (\n    day:\n      | 'Monday'\n      | 'Tuesday'\n      | 'Wednesday'\n      | 'Thursday'\n      | 'Friday'\n      | 'Saturday'\n      | 'Sunday'\n  ): void => {\n    if (!day) {\n      return;\n    }\n    setDays((days) =>\n      days.map((dayState) => {\n        if (dayState.weekday === day) {\n          return {\n            weekday: dayState.weekday,\n            selected: !dayState.selected,\n          };\n        }\n        return dayState;\n      })\n    );\n  };\n\n  useEffect(() => {\n    console.log(days);\n  }, [days]);\n\n  return (\n    <div>\n      <div className={classes.titleContainer}>\n        <Typography variant=\"overline\">\n          {'Select possible departing days'}\n        </Typography>\n      </div>\n      <div className={classes.dayButtonContainer}>\n        {days.map((day) => {\n          const { weekday, selected } = day;\n          const dayClass = clsx(classes.dayButton, {\n            [classes.activeDay]: selected,\n          });\n          return (\n            <Button\n              key={weekday}\n              className={dayClass}\n              variant={selected ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => toggleDay(weekday)}\n            >\n              {weekday}\n            </Button>\n          );\n        })}\n      </div>\n      <div className={classes.nextButtonContainer}>\n        {direction === 'return' && <Button>Next</Button>}\n      </div>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles<Theme>((theme: Theme) => ({\n  titleContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  dayButtonContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-evenly',\n    alignItems: 'stretch',\n    padding: '16px 32px 8px 32px',\n  },\n  dayButton: {\n    marginLeft: '32px',\n    marginRight: '32px',\n    marginBottom: '12px',\n    color: '#9933cc',\n    border: '1px solid rgba(153, 51, 204, 0.50);',\n  },\n  activeDay: {\n    backgroundColor: '#9933cc',\n    color: '#FFFFFF',\n    boxShadow:\n      '0px 3px 1px -2px rgba(153, 51, 204, 0.25),0px 2px 2px 0px rgba(153, 51, 204, 0.25),0px 1px 5px 0px rgba(153, 51, 204, 0.25);',\n  },\n}));\n","/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/Selectors/NormalSelector/NormalCalendar.tsx",[],"/home/tom/code/react/lets_pop_to/src/features/inspireMe/SelectNewDates/DateSelector.tsx",["177"],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"178","replacedBy":"182"},{"ruleId":"180","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":1,"column":28,"nodeType":"186","messageId":"187","endLine":1,"endColumn":34},{"ruleId":"188","severity":1,"message":"189","line":256,"column":29,"nodeType":"190","messageId":"191","endLine":256,"endColumn":31},{"ruleId":"184","severity":1,"message":"192","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":13},{"ruleId":"184","severity":1,"message":"193","line":3,"column":3,"nodeType":"186","messageId":"187","endLine":3,"endColumn":9},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],["194"],["195"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Day' is defined but never used.","'AppBar' is defined but never used.","no-global-assign","no-unsafe-negation"]